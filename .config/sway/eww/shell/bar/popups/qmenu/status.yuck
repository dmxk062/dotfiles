
(defpoll boottime :interval "200m" "awk '/btime/ {print $2}' /proc/stat")

;; Icons {{{
(defvar weather-icons '{
"01d": "weather-clear",
"01n": "weather-clear-night",
"02d": "weather-few-clouds",
"02n": "weather-few-clouds-night",
"03d": "weather-clouds",
"03n": "weather-clouds-night",
"04d": "weather-clouds",
"04n": "weather-clouds-night",
"09d": "weather-showers",
"09n": "weather-showers-night",
"10d": "weather-showers-scattered",
"10n": "weather-showers-scattered-night",
"11d": "weather-storm",
"11n": "weather-storm-night",
"13d": "weather-snow",
"13n": "weather-snow-night",
"50d": "weather-mist",
"50n": "weather-mist"
}')

(defvar weather-text-icons '{
"01d": "󰖙",
"01n": "",
"02d": "",
"02n": "",
"03d": "",
"03n": "",
"04d": "",
"04n": "",
"09d": "",
"09n": "",
"10d": "",
"10n": "",
"11d": "",
"11n": "",
"13d": "",
"13n": "",
"50d": "",
"50n": ""
}')
;; }}}

(defwidget status-mpris []
    (revealer :reveal {mpris.has_player} :transition "slidedown"
    (box :space-evenly false :class "section"
        (box :orientation "vertical" :space-evenly false :valign "center"
            (image :path {matches(mpris.title, "^Netflix") ? "assets/netflix.svg" : mpris.art} :image-width 96 :image-height 96 :style "margin: .8rem;"))
        (box :orientation "vertical" :space-evenly false :hexpand true
            (box :orientation "vertical" :space-evenly false
                :tooltip "${mpris.artist}${mpris.album != "" ? ", ${mpris.album}" : ""} - ${mpris.title}"
                (label :class "title"
                    :text "${mpris.title}"
                    :limit-width 16)
                (label :class "text"
                    :text "${mpris.artist}${mpris.album != "" ? " - ${mpris.album}" : ""}"
                    :limit-width 16))
            (centerbox
                (button :class "button" :onclick "playerctl previous" "")
                (button :style "min-width: 4.4rem;" :class "button ${mpris.playing ? "active" : ""}"
                    :onclick "playerctl play-pause"
                    "${mpris.playing ? "    Pause" : "   Play"}")
                (button :class "button" :onclick "playerctl next" ""))
            (box
                (scale
                    :onchange `playerctl position $(echo 'scale=0;({}*${mpris.length})/100'|bc)`
                    :timeout "300s"
                    :tooltip "${
                        formattime(mpris.position?:0, (mpris.length?: 0) > 3600 ? "%H:%M:%S" : "%M:%S", "UTC")} / ${
                        formattime(mpris.length?:0, (mpris.length?: 0) > 3600 ? "%H:%M:%S" : "%M:%S", "UTC")}"
                    :class "slider ${(!mpris.has_progress || (mpris.position?:0) > (mpris.length?:0)) ? "disabled" : "with-handle"}"
                    :value {(mpris.progress?:0) * 100} :min 0 :max 100))))))

(defwidget power-button [cmd icon desc color img]
    (button :class "sbutton ${color}"
        :style "min-height: 2.4rem;"
        :timeout "16s"
        :tooltip {desc}
        :onclick "${EWW_CMD} update status-top-left-widget=1 power-current-question='${desc}' power-current-cmd='${cmd}' power-current-img='${img}'"
        "${icon}"))

(defvar power-current-question "")
(defvar power-current-cmd "")
(defvar power-current-img "")
(defwidget power-confirmation-dialog []
    (box :class "section" :orientation "v" :space-evenly false
        (label :class "title" :text "${power-current-question}?")
        (label :class "text" :text {formattime(EWW_TIME - boottime, "up for %H hours, %M minutes", "UTC")})
        (hsep :height 20)
        (box :space-evenly false :vexpand true :hexpand true
            (box :style "margin-left: 1rem;" (themed-icon :name {power-current-img} :width 40 :height 40))
            (box :space-evenly false :valign "center" :hexpand true :halign "end"
                (button :class "scbutton"
                    :timeout "16s"
                    :onclick "${EWW_CMD} update status-top-left-widget=0; sleep .2; ${power-current-cmd}"
                    "Confirm")
                (button :class "scbutton"
                    :onclick "${EWW_CMD} update status-top-left-widget=0"
                    "Cancel")))))

(defwidget status-logout []
    (box :orientation "v" :class "section"
        (scroll :vscroll true :style "min-width: 4rem;"
            (box :orientation "v"
                (power-button :icon "󰤄" :color "blue" :img "system-suspend"
                    :desc "Suspend System"
                    :cmd "cd; gtklock -d; systemctl suspend")
                (power-button :icon "󰌾" :color "green" :img "lock"
                    :desc "Lock Session"
                    :cmd "cd; gtklock -d")
                (power-button :icon "󰿅" :color "yellow" :img "system-log-out"
                    :desc "Exit Session"
                    :cmd "swaymsg exit")
                (power-button :icon "󰑓" :color "orange" :img "system-reboot"
                    :desc "Reboot System"
                    :cmd "systemctl reboot")
                (power-button :icon "" :color "red" :img "system-shutdown"
                    :desc "Halt System"
                    :cmd "systemctl poweroff")
               (power-button :icon "󰘚" :color "magenta" :img "firmware-manager"
                    :desc "Reboot to Firmware"
                    :cmd "systemctl reboot --firmware-setup")))))

(defvar status-top-left-widget 0)

(defvar weather-city "Graz")
(defpoll weather :interval "30m" "bin/weather.sh")
(defwidget status-weather []
    (box :space-evenly false :orientation "vertical" :class "section" :hexpand true
        (label :class "title" :text "${formattime(EWW_TIME, "%H:%M:%S")}")
        (label :class "text" :text {formattime(EWW_TIME - boottime, "up for %H hours, %M minutes", "UTC")})
        (hsep :height 20)
        (box :space-evenly false
            (themed-icon
                :name {weather-icons[weather.weather[0].icon]}
                :width 64
                :height 64)

            (box :orientation "vertical" :space-evenly false :halign "start"
                (label :halign "start" :class "weather-${weather.main.temp > 30 ? "hot"
                    : (weather.main.temp > 20 ? "warm"
                    : (weather.main.temp > 10 ? "temperate"
                    : (weather.main.temp > 5 ? "cool"
                    : "cold")))}"
                    :text "󰔏   ${weather.main.temp}°C")
                (label :halign "start" :class "weather-wind"
                    :text "󱪈  ${round(weather.wind.speed / 3.6, 1)}km/h")
                (label :halign "start" :class "weather-description"
                    :text "󰋽   ${weather.weather[0].description}")))))

(defwidget status-panel []
    (box :space-evenly false :orientation "vertical" :hexpand true
        (box :hexpand true :space-evenly false
            (stack :selected {status-top-left-widget} :hexpand true :transition "slideup" :same-size true
                (status-weather)
                (power-confirmation-dialog))
        (status-logout))
    (status-mpris)))
