(defpoll service-swayidle :interval "20m" "pgrep swayidle >/dev/null && echo true || echo false")
(defpoll look-nightlight :interval "10m" "pgrep gammastep >/dev/null && echo true || echo false")
(defvar nightlight-strengh 3000)
(defpoll look-theme :interval "10m" "./bin/color.sh get")

(defpoll cpu-governor :interval "20m" "cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor")

(defvar cpu-governor-names '{
"performance": "󰓅   Performance",
"powersave": "󰾆   Efficiency"
}')

(defwidget toggle-panel [] 
    (box :space-evenly false :orientation "vertical"
        (box
            (button :class "cbutton ${look-nightlight ? "active" : ""}"
                :onclick "killall gammastep && ${EWW_CMD} update look-nightlight=false || { ${EWW_CMD} update look-nightlight=true; gammastep -O ${nightlight-strengh}& }"
                "${look-nightlight ? "󰖔" : ""}   Nightlight")
            (button :class "cbutton"
                :onclick "./bin/color.sh"
                :timeout "128s"
                "${look-theme == "light" ? "" : "󰖔"}   Colorscheme"))
        
        (box
            (button :class "cbutton ${service-swayidle ? "active" : ""}"
                :onclick "killall swayidle && ${EWW_CMD} update service-swayidle=false || { ${EWW_CMD} update service-swayidle=true; swayidle -w& }"
                "${service-swayidle ? "󰒲" : "󰒳"}   Swayidle")

            
            (box :class "dual-cbutton${cpu-governor == "performance" ? " active" : ""}" :space-evenly false
                (button :hexpand true
                    :onclick "./bin/cpu_governor.sh ${cpu-governor == "performance" ? "powersave" : "performance"}; ${EWW_CMD} update cpu-governor=$(< /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)"
                    :onrightclick "${EWW_CMD} update perf-revealed=${!perf-revealed}"
                    :timeout "16s"
                    {cpu-governor-names[cpu-governor]})
                (button 
                    :onclick "${EWW_CMD} update perf-revealed=${!perf-revealed}"
                    {perf-revealed ? "" : "" })))))

(defpoll service-blueman :run-while {perf-revealed} :interval "20m"
    `pgrep blueman-applet -d " "||true`)
(defpoll service-networkmanager :run-while {perf-revealed} :interval "20m"
    `pgrep nm-applet -d " "||true`)
(defpoll service-fcitx5 :run-while {perf-revealed} :interval "20m"
    `pgrep fcitx5 -d " "||true`)
(defpoll service-autotile :run-while {perf-revealed} :interval "20m"
    `pgrep -f 'python.*layout.py' -d " "`)

(defwidget pid-toggle [pids command var text]
    (box :space-evenly false :halign "start" :style "margin-left: 1rem; padding: .2rem;"
        (checkbox :checked {pids != ""}
            :timeout "16s"
            :onunchecked "kill ${pids}&& ${EWW_CMD} update ${var}=''"
            :onchecked "${command}& ${EWW_CMD} update ${var}=$!"
            )
        (label :class "text" :text {text})))

(defwidget tray-processes []
    (box :space-evenly false :orientation "vertical" :class "section" :style "padding: .8rem;"
        (pid-toggle 
            :pids service-blueman 
            :var "service-blueman" 
            :command "blueman-applet" 
            :text "Blueman Applet")
        (pid-toggle 
            :pids service-networkmanager
            :var "service-networkmanager"
            :command "nm-applet"
            :text "Networkmanager Applet")
        (pid-toggle 
            :pids service-fcitx5
            :var "service-fcitx5"
            :command "fcitx5"
            :text "fcitx5 IME")
        (pid-toggle
            :pids service-autotile
            :var "service-autotile"
            :command "~/.config/sway/scripts/layout.py"
            :text "Autotiling")))
