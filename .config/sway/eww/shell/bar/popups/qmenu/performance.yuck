(deflisten perf-net "./bin/netspeed.py")
(deflisten perf-gpu "./bin/gpu.sh")
(defpoll perf-pcount :run-while perf-revealed :interval "4s" "pgrep --count .")

(defvar gpu-sensor "AMDGPU_JUNCTION")
(defvar cpu-sensor "ASUSEC_CPU")

(defvar mem-kb 1024)
(defvar mem-mb 1048576)
(defvar mem-gb 1073741824)

(defwidget colored-scale [value left right ?temp ?class ?min ?max]
    (box :space-evenly false :orientation "v"
        (box :space-evenly false 
            (box :halign "start" :hexpand true 
                (label :class "perf-label" :text left))
            (label :class "perf-label-right" :text right))
        (scale 
            :min {min?:0}
            :max {max?:100}
            :active false
            :value {value}
            :class "perf-scale-${class?: (temp > 70 ? "critical" 
                : (temp > 60 ? "hot" 
                : (temp > 50 ? "warm" 
                : (temp > 40 ? "normal" 
                : "cool"))))}")))


(defwidget performance-panel []
    (box :hexpand true :space-evenly false :orientation "v"
        (tray-processes)
        (box :orientation "v" :hexpand true :class "section" :space-evenly false
            (label :class "text" :text "${perf-pcount} Processes")
            (colored-scale 
                :temp {EWW_TEMPS[cpu-sensor]}
                :value {EWW_CPU.avg}
                :left "CPU: ${round(EWW_CPU.avg, 1)}%"
                :right "${EWW_TEMPS[cpu-sensor]}°C")
            (colored-scale
                :temp {EWW_TEMPS[gpu-sensor]} 
                :value {perf-gpu?.usage?:0}
                :left "GPU: ${perf-gpu?.usage?:"…"}%"
                :right "${EWW_TEMPS[gpu-sensor]}°C")
            (colored-scale 
                :class "mem" 
                :value {EWW_RAM.used_mem_perc}
                :left "MEM: ${round(EWW_RAM.used_mem_perc, 1)}%"
                :right "${round(EWW_RAM.used_mem / mem-gb, 1)}GB / ${round(EWW_RAM.total_mem / mem-gb, 1)}GB")
            (colored-scale 
                :class "net-up"
                :value {perf-net.sent_rel}
                :left "Send: ${perf-net.sent_pretty}/s"
                :right "Total: ${perf-net.total_sent_pretty}")
            (colored-scale 
                :class "net-down" 
                :value {perf-net.recv_rel}
                :left "Recv: ${perf-net.recv_pretty}/s"
                :right "Total: ${perf-net.total_recv_pretty}"))))
