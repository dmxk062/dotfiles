(deflisten perf-net "./bin/netspeed.py")
(deflisten perf-gpu "./bin/gpu.sh")
(defpoll perf-pcount :run-while perf-revealed :interval "4s" "pgrep --count .")

(defvar gpu-sensor "AMDGPU_JUNCTION")
(defvar cpu-sensor "ASUSEC_CPU")

(defwidget colored-scale [value text ?temp ?class ?min ?max]
    (box :space-evenly false :orientation "v"
        (box :halign "start" (label 
            :text {text}
            :class "perf-label"))
        (scale 
            :min {min?:0}
            :max {max?:100}
            :active false
            :value {value}
            :class "perf-scale-${class?: (temp > 70 ? "critical" 
                : (temp > 60 ? "hot" 
                : (temp > 50 ? "warm" 
                : (temp > 40 ? "normal" 
                : "cool"))))}")))

(defwidget performance-panel []
    (box :hexpand true :space-evenly false :orientation "v"
        (tray-processes)
        (box :orientation "v" :hexpand true :class "section" :space-evenly false
            (label :class "text" :text "${perf-pcount} Processes")
            (colored-scale 
                :text "CPU: ${round(EWW_CPU.avg, 1)}% at ${EWW_TEMPS[cpu-sensor]}°C"
                :temp {EWW_TEMPS[cpu-sensor]}
                :value {EWW_CPU.avg})
            (colored-scale
                :text "GPU: ${perf-gpu.usage}% at ${EWW_TEMPS[gpu-sensor]}°C"
                :temp {EWW_TEMPS[gpu-sensor]} 
                :value {perf-gpu.usage})
            (colored-scale 
                :text "RAM: ${round(EWW_RAM.used_mem_perc, 1)}%"
                :class "mem" 
                :value {EWW_RAM.used_mem_perc})

            (colored-scale 
                :text "Send: ${perf-net.sent_pretty}/s"
                :class "net-up"
                :value {perf-net.sent_rel})
            (colored-scale 
                :text "Recv: ${perf-net.recv_pretty}/s" 
                :class "net-down" 
                :value {perf-net.recv_rel}))))
