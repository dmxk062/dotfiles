cmd open $~/.config/lf/bin/open.sh $fx

# command to set selected file as wallpaper using swww
cmd wallpaper &{{
    ~/.config/background/wallpaper.sh ${1:-wall} $f
}}

# display PWD in window title
# adds every new directory to zoxide
cmd on-cd &{{
   printf "\033]0;lf: $(pwd | sed "s|$HOME|~|" )\007" > /dev/tty
   zoxide add "$PWD"
}}

cmd chmod %{{
    chmod "$@" $fx
    lf -remote "send reload"
}}

cmd chown %{{
    chown "$a" $fx
    lf -remote "send reload"
}}

cmd paste-async &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -rn -- "$@" .;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send $id echo Operation finished."
}}


# info about files
cmd print-mimetype &{{
    type=$(file --brief --mime-type "$f")
    lf -remote "send $id echo $type"
}}

cmd disk-usage &{{
    size="$(dust -n 0 -j "$f" | jq '.size')"
    i=1
    declare -a units=(B KB MB GB TB)
    while ((size > 1024)); do
        ((i++))
        ((size /= 1024.0))
    done
    printf -v fmt "${f:t}: %.2f %s" $size $units[i]
    lf -remote "send $id echo $fmt"
}}

cmd backup &{{
    ~/.config/lf/bin/bak.sh $f
}}

cmd follow-link %{{
    fpath="${f:A}"
    lf -remote "send $id select ${fpath// /\\ }" 
}}

# quit(muscle memory)
cmd q :quit

# create {{{
cmd mkdir %{{
    mkdir -p "$@" 
    lf -remote "send $id select $1"
    printf " Created Directory(s): $@"
}}

# create a .odt file
cmd mkodt %{{
    name="$1"
    escname=$(echo "$name"|sed 's/ /\\ /g')
    cp ~/.local/share/templates/odt.odt ./"$name".odt 
    # mv ./odt.odt ./$escname.odt
    lf -remote "send $id select $escname.odt"
    printf "󰈙 Created odt file: $name.odt"
}}

cmd make-file &{{
    created="$(~/.config/zsh/scripts/newf "$@")"
    lf -remote "send $id reload"
    lf -remote "send $id select ${created// /\\ }"
}}

# symlink a file
cmd link %{{
    ln -s -- "$f" $1
}}

cmd paste-link &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    local -a files=("$@")

    for file in "${files[@]}"; do
        ln -s -- "$file" "${file:t}"
        lf -remote "send $id select $PWD/${file:t}"
    done

    rm ~/.local/share/lf/files
}}
# }}}

# trash {{{
# trash smth using gio(moves to ~/.local/share/Trash/files and adds entry)
cmd trash-trash %{{
    ~/.config/lf/bin/trash.sh add $fx
}}

# restores file from gio trash, use in trash directory on file
cmd trash-restore %{{
    ~/.config/lf/bin/trash.sh restore $fx
}}

# empty the entire trash
cmd trash-clear %{{
    printf "  Do you really want to empty the Trash? <y/N> "
    read answer
    if [[ "$answer" == "y" ]]
    then 
        gio trash --empty
        printf "  Trash emptied"
    else
        printf "  Trash not emptied"
    fi
}}
# }}}

# clipboard {{{
# copy file name into clipboard
cmd cp-name &{{
    printf "$f"|wl-copy
}}

# copy file into clipboard for e.g. libreoffice
cmd cp-content &{{
    wl-copy < $f
}} 

# paste clipboard content
cmd clip-paste &{{
    wl-paste > $1
    if [[ $? -eq 0 ]]
    then
        lf -remote "send $id select $1"
        lf -remote "send $id reload"
    fi
}}

# info about file mimetype, same use case as above
cmd clip-info &{{
    mimetypes=($(wl-paste -l || echo))
    lf -remote "send $id echo ${(j:, :)mimetypes:-nothing}"
}}
# }}}

# integrations {{{
# zoxide
cmd z %{{
    result="$(zoxide query --exclude $PWD $@)"
    escresult="$(echo $result|sed 's/ /\\ /g')"
    lf -remote "send $id cd $escresult"
}}

# zoxide+fzf
cmd zi ${{
    result="$(_ZO_FZF_OPTS="$_ZO_FZF_OPTS --height=999" zoxide query -i)"
    escresult="$(echo $result|sed 's/ /\\ /g')"
    lf -remote "send $id cd $escresult"
}}

# jump to dir using fzf
cmd fzf-jump ${{
    res="$(fd -I --hidden --type=dir | fzf --prompt="cd: " --preview='lsd "$(echo {}|cut -f2)"')"
    lf -remote "send $id cd \"$res\""
}}

cmd fzf-select ${{
    res="$(fd --hidden|fzf --prompt="sel: ")"
    if [[ "${res:t}" == "."* ]]; then
        lf -remote "send $id set hidden"
    fi
    lf -remote "send $id select \"$res\""
}}

cmd rg-select ${{
    cmd="rg --column --line-number --no-heading --color=always --smart-case"
    IFS=: read -r fl _ _ _ < <(fzf --ansi --disabled --layout=reverse --delimiter=: \
        --bind="start:reload([ -n {q} ] && $cmd -- {q} || true)" \
        --bind="change:reload([ -n {q} ] && $cmd -- {q} || true)" \
        --preview='lnum={2};bat -r$(( lnum < 8 ? 0 : lnum - 8)):$(( lnum + 8 )) --number --color=always --highlight-line={2} -- {1}'\
        --preview-window=down)
    if [[ "$fl" == "."* ]]; then
        lf -remote "send $id set hidden"
    fi
    lf -remote "send $id select \"$fl\""
}}
# }}}

# archives {{{
cmd zip &{{
    fx=($fx)
    fx=(${fx#"$PWD/"})
    if [[ -z "$1" ]]; then
        zipfile="${fx[1]}.zip"
    else
        zipfile="$1.zip"
    fi
    zip -r "$zipfile" $fx
    lf -remote "send $id unselect"
    lf -remote "send $id select \"${zipfile}\""
}}

cmd unzip &{{
    dest="${1:-.}"
    unzip "$f" -d "$dest"
    if [[ "$dest" != "." ]]; then
        lf -remote "send $id select \"$dest\""
    fi
}}

cmd tar &{{
    fx=($fx)
    fx=(${fx#"$PWD/"})
    if [[ -z "$1" ]]; then
        tarfile="${fx[1]}.tar"
    else
        tarfile="$1.tar"
    fi
    ext="${2:-gz}"
    if [[ "$ext" != "none" && "$ext" != "" ]]; then
        name="$tarfile.$ext"
    else
        name="$tarfile"
    fi

    tar caf "$name" $fx 
    lf -remote "send $id unselect"
    lf -remote "send $id select \"${name}\""
}}

cmd untar &{{
    dest="${1}"
    if [[ -n "$dest" ]]; then
        mkdir "$dest"
        cd "$dest"
    fi
    tar xaf "$f"
    if [[ -n "$dest" ]]; then
        lf -remote "send $id select \"${dest}\""
    fi
}}

cmd unrar &{{
    dest="${1}"
    if [[ -n "$dest" ]]; then
        mkdir "$dest"
        cd "$dest"
    fi
    unrar-free -x "$f"
    if [[ -n "$dest" ]]; then
        lf -remote "send $id select \"${dest}\""
    fi
}}
# }}}

# images {{{
cmd image-rotate %{{
    angle=${1:-90}
    target="$2"
    magick "$f" -rotate "${1:-90}" "${target:-$f}"
    if [[ -n "$target" ]]; then
        lf -remote "send $id select \"$target\""
    fi
    lf -remote "send $id redraw"
}}

cmd image-resize %{{
    size=${1:-1920x1080}
    target="${2:-"$size-$f"}"
    magick "$f" -resize "$size" "$target"
    lf -remote "send $id select \"$target\""
}}
# }}}
