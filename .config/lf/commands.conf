cmd open $~/.config/lf/bin/open.sh $fx

# command to set selected file as wallpaper using swww
cmd wallpaper &{{
    ~/.config/background/wallpaper.sh wall $f
}}

# display PWD in window title
cmd on-cd &{{
   printf "\033]0;lf: $(pwd | sed "s|$HOME|~|" )\007" > /dev/tty
}}

# tar selected files into dir
cmd tar &{{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
    lf -remote "send $id echo  󰛫 Compressing Files with gzip finished."
}}

# tar whole dir
cmd tardir &{{
    tar czf $f.tar.gz $f
    lf -remote "send $id echo  󰛫 Compressing Directory $f with gzip finished."
}}

# tar and compress using lzma
cmd xz_tardir &{{
   tar -c --use-compress-program='xz -7 -T0' -f $f.tar.xz $f 
    lf -remote "send $id echo  󰛫 Compressing Directory $f with lzma finished."
}}

# zip
cmd zip &{{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
    lf -remote "send $id echo  󰛫 Zipping Files finished."
}}

# zip selected item
cmd zipdir ${{
    zip -r $f.zip $f
    lf -remote "send $id echo  󰛫 Zipping File $f finished."
}}
# simple chmod
cmd chmod %{{
    chmod "$@" $fx
    lf -remote "send reload"
}}
# chown
cmd chown %{{
    chown "$a" $fx
    lf -remote "send reload"
}}

# various operations as root
cmd sudochmod %{{
    sudo chmod "$@" $fx
    lf -remote "send reload"
}}
cmd sudochown ${{
    sudo chown "$@" $fx
    lf -remote "send reload"
}}
cmd sudorename ${{
    sudo mv "$f" "$@"
    lf -remote "send reload"
}}

# create a dir
cmd mkdir %{{
    mkdir -p "$@" 
    lf -remote "send $id select $1"
    printf " Created Directory(s): $@"
}}

# create a .odt file
cmd mkodt %{{
    name="$1"
    escname=$(echo "$name"|sed 's/ /\\ /g')
    cp ~/.local/share/templates/odt.odt ./"$name".odt 
    # mv ./odt.odt ./$escname.odt
    lf -remote "send $id select $escname.odt"
    printf "󰈙 Created odt file: $name.odt"
}}

# trash smth using gio(moves to ~/.local/share/Trash/files and adds entry)
cmd trash_trash %{{
    ~/.config/lf/bin/trash.sh add $fx
}}

# restores file from gio trash, use in trash directory on file
cmd trash_restore %{{
    ~/.config/lf/bin/trash.sh restore $fx
}}

# empty the entire trash
cmd trash_clear %{{
    printf "  Do you really want to empty the Trash? <y/N> "
    read answer
    if [[ "$answer" == "y" ]]
    then 
        gio trash --empty
        printf "  Trash emptied"
    else
        printf "  Trash not emptied"
    fi
}}

# copy file name into clipboard
cmd copy_fname &{{
    printf "$f"|wl-copy
}}

# copy file into clipboard for e.g. libreoffice
cmd copy_file &{{
    wl-copy < $f
}} 

# paste with different name, needed when copied from things other than lf/wlsc script
cmd Paste &{{
    wl-paste > $1
    if [[ $? -eq 0 ]]
    then
        lf -remote "send $id select $1"
        lf -remote "send $id reload"
    fi
}}

# info about file mimetype, same use case as above
cmd pasteinfo &{{
    mimetypes=($(wl-paste -l || echo))
    lf -remote "send $id echo ${(j:, :)mimetypes:-nothing}"
}}

# symlink a file
cmd link %{{
    ln -s -- "$f" $1
}}

# zoxide
cmd z %{{
    result="$(zoxide query --exclude $PWD $@)"
    escresult="$(echo $result|sed 's/ /\\ /g')"
    lf -remote "send $id cd $escresult"
}}

# zoxide+fzf
cmd zi ${{
    result="$(_ZO_FZF_OPTS="$_ZO_FZF_OPTS --height=99999" zoxide query -i)"
    escresult="$(echo $result|sed 's/ /\\ /g')"
    lf -remote "send $id cd $escresult"
}}

# jump to dir using fzf
cmd fzf_jump ${{
    res="$(fd --hidden -I --type=dir -E "*.steam/*"|fzf --prompt="cd: " --preview='lsd "$(echo {}|cut -f2)"')"
    lf -remote "send $id cd \"$res\""
}}

cmd fzf_select ${{
    res="$(fd --hidden|fzf --prompt="sel: ")"
    lf -remote "send $id select \"$res\""
}}

# async cp
cmd pasteasync &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -rn -- "$@" .;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send $id echo 󰈔 Finished copying/moving files."
}}

cmd paste_link &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    local -a files=("$@")

    for file in "${files[@]}"; do
        ln -s -- "$file" "${file:t}"
        lf -remote "send $id select $PWD/${file:t}"
    done

    rm ~/.local/share/lf/files
}}

# mounting
cmd dmount ${{
    udisksctl mount -b $f
    lf -remote "send $id echo 󱊞 Mounted device $f."
}}

cmd dumount ${{
    udisksctl unmount -b $f
    lf -remote "send $id echo 󱊟 Unmounted device $f."
}}

cmd ddecrypt ${{
    udisksctl unlock -b $f
    lf -remote "send $id echo  Unlocked encrypted device $f."
}}

cmd dencrypt ${{
    udisksctl lock -b $f
    lf -remote "send $id echo  Locked encrypted device $f"
}}

cmd fmount &{{
    file=$f
    block_device=$(losetup -a | grep "$file" | sed 's/: .*$//')

    udisksctl loop-setup -f $file; find_block_device
    ls "${block_device}p1" &&udisksctl mount -b ${block_device}p1||udisksctl mount -b ${block_device}
    lf -remote "send $id echo 󰗮 Mounted file $f at $block_device"
}}

cmd fumount &{{
    file=$f
    block_device=$(losetup -a | grep "$file" | sed 's/: .*$//')

    ls "${block_device}p1" &&udisksctl unmount -b ${block_device}p1||udisksctl unmount -b ${block_device}
    udisksctl loop-delete -b ${block_device}
    lf -remote "send $id echo 󰗮 Unmounted file $f formerly mounted at $block_device"
}}

cmd deject ${{
    udisksctl power-off -b $f
    lf -remote "send $id echo 󰕓 Ejected device $f"
}}

# info about files
cmd fileinfo &{{
    file=$f
    type=$(xdg-mime query filetype $file)
    lf -remote "send $id echo 󰈔 $type"
}}

# backup
cmd backup &{{
    ~/.config/lf/bin/bak.sh $f
}}

cmd mtp &{{
    IFS=" " read -r bus dev < <(lsusb|grep MTP|cut -d' ' -f 2,4) || {
        lf -remote "send $id echoerr No MTP devices found"
        false
    }
    dev="${dev%?}"
    if [[ "$1" == "mount" ]]; then
        gio mount "mtp://[usb:$bus,$dev]"|| true
        mountpath="$(echo /run/user/$UID/gvfs/mtp:host=* )"
        lf -remote "send $id cd $mountpath"
    else
        gio mount -u "mtp://[usb:$bus,$dev]"
    fi
}}

cmd follow_link %{{
    fpath="${f:A}"
    escpath=$(echo $fpath|sed 's/ /\\ /g')
    lf -remote "send $id select $escpath" 
}}

cmd mf &{{
    ~/.config/zsh/scripts/newf "$@"
    lf -remote "send $id reload"
}}

# quit(muscle memory)
cmd q :quit
