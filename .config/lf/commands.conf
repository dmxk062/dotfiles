cmd open &{{ ~/.config/lf/bin/open.sh $fx}}

# command to set selected file as wallpaper using swww
cmd wallpaper &{{
    ~/.config/background/wallpaper.sh ${1:-wall} $f
}}

# # display PWD in window title
# # adds every new directory to zoxide
cmd on-cd &{{
   printf "\033]0;lf: ${(D)PWD}\007" > /dev/tty
   zoxide add "$PWD"
}}

cmd chmod %{{
    chmod "$@" $fx
    lf -remote "send reload"
}}

cmd chown %{{
    chown "$@" $fx
    lf -remote "send reload"
}}

cmd paste-async &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -rn -- "$@" .;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send $id echo Operation finished."
}}


# info {{{
cmd info-mimetype &{{
    type=$(file --brief --mime-type "$f")
    lf -remote "send $id echo ${(q)type}"
}}

cmd disk-usage &{{
    size="$(dust -n 0 -j "$f" | jq '.size')"
    i=1
    declare -a units=(B KB MB GB TB)
    while ((size > 1024)); do
        ((i++))
        ((size /= 1024.0))
    done
    printf -v fmt "${f:t}: %.2f %s" $size $units[i]
    lf -remote "send $id echo $fmt"
}}
# }}}

cmd backup &{{
    ~/.config/lf/bin/bak.sh $f
}}

cmd follow-link %{{
    fpath="${f:A}"
    lf -remote "send $id select ${(q)fpath}" 
}}

cmd clean-cache %{{
    rm -rf -- "$XDG_CACHE_HOME/lf"
}}

# quit(muscle memory)
cmd q :quit

# create {{{
cmd mkdir %{{
    mkdir -p "$@" 
    lf -remote "send $id select ${(q)1}"
    printf " Created Directory(s): $@"
}}

# create a .odt file
cmd mkodt %{{
    cp ~/.local/share/templates/odt.odt ./"$1".odt 
    # mv ./odt.odt ./$escname.odt
    lf -remote "send $id select ${(q)1}.odt"
    printf "󰈙 Created odt file: $1.odt"
}}

cmd make-file &{{
    created="$(~/.config/zsh/scripts/newf "$@")"
    lf -remote "send $id reload"
    lf -remote "send $id select ${(q)@}"
}}

# symlink a file
cmd link %{{
    ln -s -- "$f" $1
}}

cmd paste-link &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    local -a files=("$@")

    for file in "${files[@]}"; do
        ln -s -- "$file" "${file:t}"
        to_select="$PWD/${file:t}"
        lf -remote "send $id select ${(q)to_select}"
    done

    rm ~/.local/share/lf/files
}}
# }}}

# trash {{{
# trash smth using gio(moves to ~/.local/share/Trash/files and adds entry)
cmd trash-trash %{{
    ~/.config/lf/bin/trash.sh add $fx
}}

# restores file from gio trash, use in trash directory on file
cmd trash-restore %{{
    ~/.config/lf/bin/trash.sh restore $fx
}}

# empty the entire trash
cmd trash-clear %{{
    printf "  Do you really want to empty the Trash? <y/N> "
    read answer
    if [[ "$answer" == "y" ]]
    then 
        gio trash --empty
        printf "  Trash emptied"
    else
        printf "  Trash not emptied"
    fi
}}
# }}}

# clipboard {{{
# copy file name into clipboard
cmd cp-name &{{
    printf "$f"|wl-copy
}}

# copy file into clipboard for e.g. libreoffice
cmd cp-content &{{
    wl-copy < $f
}} 

# paste clipboard content
cmd clip-paste &{{
    wl-paste > $1
    if [[ $? -eq 0 ]]
    then
        lf -remote "send $id select ${(q)1}"
        lf -remote "send $id reload"
    fi
}}

# info about file mimetype, same use case as above
cmd clip-info &{{
    mimetypes=($(wl-paste -l || echo))
    lf -remote "send $id echo ${(j:, :)mimetypes:-nothing}"
}}
# }}}

# integrations {{{
# zoxide
cmd z %{{
    result="$(zoxide query --exclude $PWD $@)"
    lf -remote "send $id cd ${(q)@}"
}}

# zoxide+fzf
cmd zi ${{
    result="$(_ZO_FZF_OPTS="$_ZO_FZF_OPTS --height=999" zoxide query -i)"
    lf -remote "send $id cd ${(q)result}"
}}

# jump to dir using fzf
cmd fzf-jump ${{
    res="$(fd -I --hidden --type=dir | fzf --prompt="cd: " --preview='lsd "$(echo {}|cut -f2)"')"
    lf -remote "send $id cd ${(q)res}"
}}

cmd fzf-select ${{
    res="$(fd --hidden|fzf --prompt="sel: ")"
    if [[ "${res:t}" == "."* ]]; then
        lf -remote "send $id set hidden"
    fi
    lf -remote "send $id select ${(q)res}"
}}

cmd rg-select ${{
    cmd="rg --column --line-number --no-heading --color=always --smart-case"
    IFS=: read -r fl _ _ _ < <(fzf --ansi --disabled --layout=reverse --delimiter=: \
        --bind="start:reload([ -n {q} ] && $cmd -- {q} || true)" \
        --bind="change:reload([ -n {q} ] && $cmd -- {q} || true)" \
        --preview='lnum={2};bat -r$(( lnum < 8 ? 0 : lnum - 8)):$(( lnum + 8 )) --number --color=always --highlight-line={2} -- {1}'\
        --preview-window=down)
    if [[ "$fl" == "."* ]]; then
        lf -remote "send $id set hidden"
    fi
    lf -remote "send $id select ${(q)fl}"
}}
# }}}

# archives {{{
cmd clean-archives &{{
    LIST="$HOME/Tmp/arc/open.list"
    if [[ ! -f "$LIST" ]]; then
        exit
    fi

    while IFS=$'\0' read -r file link cache; do
        chmod +w -R -- "$cache" ||true
        rm -rf -- "$cache" ||true
        unlink "$link" ||true
    done < "$LIST"

    rm "$LIST"
}}

cmd zip &{{
    fx=("${=fx}")
    fx=("${(@)fx#"$PWD/"}")
    if [[ -z "$1" ]]; then
        zipfile="${fx[1]}.zip"
    else
        zipfile="$1.zip"
    fi

    lf -remote "send $id set watch!"
    zip --display-bytes -r "$zipfile" "${fx[@]}" | while IFS="]" read -r prog l; do
        IFS=" " read -r _ cur <<< "$l"
        print -Pv msg "%F{12}\\\\#zip: %F{8}[%F{magenta}${prog:1}%F{8}]%F{white} $cur"
        lf -remote "send $id echo $msg"
    done
    lf -remote "send $id set watch;unselect"
    lf -remote "send $id select ${(q)zipfile}"
}}

cmd tar &{{
    fx=("${=fx}")
    fx=("${(@)fx#"$PWD/"}")
    if [[ -z "$1" ]]; then
        tarfile="${fx[1]}.tar.gz"
    elif [[ "$1" == .* ]]; then
        tarfile="${fx[1]}$1"
    else
        tarfile="$1.tar.${2:-gz}"
    fi

    lf -remote "send $id set watch!"
    filecount=$(fd --type=f . -- "${fx}" | wc -l)
    curcount=0
    tar cvaf "$tarfile" "${fx[@]}" | while IFS=" " read -r cur; do
        if ((curcount % 3)); then
            print -Pv msg "%F{12}\\\\#tar: %F{8}[%F{magenta}${curcount} / ${filecount}%F{8}]%F{white} $cur"
            lf -remote "send $id echo $msg"
        fi
        ((curcount += 1))
    done
    lf -remote "send $id set watch;unselect"
    lf -remote "send $id select ${(q)tarfile}"
}}

cmd extract &{{
    dest="$1"
    if [[ -n "$dest" ]]; then
        mkdir "$dest"
    else
        dest="."
    fi

    bsdtar -x -C "$dest" -f "$f"
    if [[ -n "$dest" ]]; then
        lf -remote "send $id select ${(q)dest}"
    fi
}}
# }}}

# images {{{
cmd image-rotate %{{
    angle=${1:-90}
    target="$2"
    magick "$f" -rotate "${1:-90}" "${target:-$f}"
    if [[ -n "$target" ]]; then
        lf -remote "send $id select ${(q)target}"
    fi
    lf -remote "send $id redraw"
}}

cmd image-resize %{{
    size=${1:-1920x1080}
    target="${2:-"$size-$f"}"
    magick "$f" -resize "$size" "$target"
    lf -remote "send $id select ${(q)target}"
}}
# }}}

# kitty {{{
cmd vsp &{{
    if [[ -z "$@" ]]; then
        cmd="lf -command 'select ${(q)f}'"
    else
        local -a files=($fx)
        IFS=" " cmd="${(q)@} ${(@q)files}"
    fi
    kitty @ launch --cwd="$PWD" --type=window --location=vsplit -- zsh -ic -- "$cmd"
}}

cmd sp &{{
    if [[ -z "$@" ]]; then
        cmd="lf -command 'select ${(q)f}'"
    else
        local -a files=($fx)
        IFS=" " cmd="${(q)@} ${(@q)files}"
    fi
    kitty @ launch --cwd="$PWD" --type=window --location=hsplit -- zsh -ic -- "$cmd"
}}

cmd vsp! &{{
    if [[ -z "$@" ]]; then
        kitty @ launch --cwd="$PWD" --type=window --location=vsplit
    else
        local -a files=($fx)
        IFS=" " cmd="${(q)@} ${(@q)files}"
        kitty @ launch --cwd="$PWD" --type=window --location=vsplit -ic -- "$cmd; read"
    fi
}}

cmd sp! &{{
    if [[ -z "$@" ]]; then
        kitty @ launch --cwd="$PWD" --type=window --location=hsplit
    else
        local -a files=($fx)
        IFS=" " cmd="${(q)@} ${(@q)files}"
        kitty @ launch --cwd="$PWD" --type=window --location=hsplit -- zsh -ic -- "$cmd; read"
    fi
}}

cmd kitty-cmd &{{
    kitty @ action "$@"
}}
# }}}
