#!/usr/bin/env zsh

# simple math things i use farely often

# only source this, never run
if ! [[ $ZSH_EVAL_CONTEXT =~ :file$ ]]; then
    print "Extension modules are not meant to be run. Use \`+mod math\` instead"
    exit 1
fi

if [[ "$1" == "load" ]]; then

function conv {
    local from="$1"
    local to="$2"
    local res
    # -t is for result only, -c0 disables color, -s "fractions 0" always makes it return a decimal,
    # the - before $to disables mixed units
    res="$(qalc -t -c0 -s "fractions 0" -s "precision 100" "$from to -$to")"
    print "${res//$to/}"
}

function _math {
    local pi=3.1415926535897932384
    local e=2.71828182845904523536
    print -- "$[ $@ ]"

}

alias math="noglob _math"

function sum {
    local accumulator=0
    local value

    if (($# == 0)); then
        while read -r value; do
            ((accumulator+=value))
        done
    else
        for value in $@; do
            ((accumulator+=value))
        done
    fi
    print -- $accumulator
}

function ucov {
    local from="${1:-K}"
    local to="${2:-M}"
    local round="${3:-16}"
    local -A units=(
        ["b"]=$((1/8.0))
        ["B"]=1
        ["K"]=1024.0
        ["M"]=$((1024**2)).0
        ["G"]=$((1024**3)).0
        ["T"]=$((1024**4)).0
    )
    local value in out
    while read -r value; do
        in=$((units[$from] * value))
        out=$((in / units[$to]))
        printf "%.${round}g\n" "$out"
    done
}

elif [[ "$1" == "unload" ]]; then

unfunction conv ucov _math sum

unalias math

fi
