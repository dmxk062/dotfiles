#!/usr/bin/env bash

# flatpak wrapper for the cli
# designed to be similar to pacman and yay

RED="\e[31m"
GREEN="\e[32m"
BLUE="\e[34m"
CYAN="\e[36m"
PURPLE="\e[35m"
WHITE="\e[39m"
BOLD="\e[1m"
RESET="\e[0m"

declare -A INSTALLED=()

error(){
    echo -e "${RED}$1${RESET}" >&2
}

is_installed(){
    local search="$1.$2"
    local pkg
    for pkg in "${!INSTALLED[@]}"; do
        if [[ "$pkg" == "$search" ]]; then
            return 0
        fi
    done
    return 1
}

get_installed(){
    local line id ver install
    while read -r line; do
        IFS=$'\t' read -r _ id ver _ _ install <<< "$line"
        INSTALLED+=(["$id.$ver"]="$install")
    done < <(flatpak list)
}

highlight_pkgs() {
    local number="$1"
    local installed="$2"
    local count=$number
    local name desc id ver branch repo format repo_color
    while read -r line; do
        IFS=$'\t' read -r name desc id ver branch repo <<< "$line"
        
        repo_color="$CYAN"
        if [[ "$repo" != "flathub" ]]; then
            repo_color="$PURPLE"
        fi

        format="${BOLD}${repo_color}%s${RESET}/${BOLD}%s${RESET}/${BOLD}%s${RESET}${CYAN} %s${RESET}\n    %s\n"
        if ((installed)); then
            if is_installed "$id" "$ver"; then
                local inst_type="${INSTALLED["$id.$ver"]}"
                local inst_color
                if [[ "$inst_type" == "system" ]]; then
                    inst_color="$PURPLE"
                elif [[  "$inst_type" == "user" ]]; then
                    inst_color="$BLUE" 
                else
                    inst_color="$WHITE"
                fi
                format="${BOLD}${repo_color}%s${RESET}/${BOLD}%s${RESET}/${BOLD}%s${RESET}${CYAN} %s ${inst_color}${BOLD}(Installed: $inst_type)${RESET}\n    %s\n"
            else
                format="${BOLD}${repo_color}%s${RESET}/${BOLD}%s${RESET}/${BOLD}%s${RESET}${CYAN} %s${RESET}\n    %s\n"
            fi
        fi
        if ((number)); then
            format="${PURPLE}${count} ${RESET}${format}"
            ((count--))
        fi
        printf "$format" "$repo" "$id" "$name" "$ver" "$desc"
    done
}


declare -a pargs=()
mode=update

for arg in "$@"; do
    case "$arg" in 
        "-Syu")
            mode=update
            ;;
        "-Ss")
            mode=search
            ;;
        "-R")
            mode=remove
            ;;
        "-S")
            mode=install
            ;;
        *)
            pargs+=("$arg")
    esac
done
if [[ "$mode" == update ]] && ((${#pargs} > 0)); then
    mode=interactive
fi

case "$mode" in 
    search)
        get_installed
        flatpak search -- "${pargs[*]}"|highlight_pkgs 0 1
        ;;
    interactive)
        searchterm="${pargs[*]}"
        packagestr="$(flatpak search -- "$searchterm")"
        if [[ "$packagestr" == "" ]] || [[ "$packagestr" == *"No matches found"* ]]; then
            error "Package not found: \`$searchterm\`"
            exit 1
        fi
        get_installed
        IFS=$'\n' read -r -d '' -a packages <<< "$packagestr"
        echo "$packagestr"|highlight_pkgs "${#packages[@]}" 1
        echo -en "${GREEN}${BOLD}==> ${RESET}Packages to install \n${GREEN}${BOLD}==> ${RESET}"

        read -r index
        if [[ ! "$index" =~ ^[0-9]+$ ]] || ((index > ${#packages})); then
            exit
        fi
        
        selected="${packages[$index-1]}"
        IFS=$'\t' read -r name desc id ver branch repo <<< "$selected"

        if is_installed "$id" "$ver"; then
            error "$name is already installed."
        fi

        flatpak install -- "$id"
        ;;
    install)
        flatpak install "${pargs[@]}"
        ;;
    remove)
        flatpak remove "${pargs[@]}"
        ;;
    update)
        flatpak update
        ;;
esac
