(defvar service_idle true)
(defvar service_clocks false)
(defvar service_blueman false)
(defvar service_nm true)
(defvar hide-notif-popups false)

(defvar dock true)
(defvar bar true)
(defvar popups true)
(defvar rightclick true)
(defvar titlebars false)


(defvar system '{}')

(defwidget system_section []
    (box :visible "${selected_section == 3}" :class "section_box" :hexpand true :orientation "h" :space-evenly false  :vexpand true
        (box :orientation "h" :space-evenly false :class "sidebar" 
        (scroll :class "scroll-thin"
            (box :orientation "v" :space-evenly false
                (label :class "title" :text "Background Processes")
                (list_box
                    (button :class "button${service_blueman ? "-active" : ""}" :timeout "16s" :onclick "bin/sys/service.sh blueman" "󰂯    Blueman")
                    (wrapped_text :text "Control bluetooth devices via the system tray. Also receive notifications on connections")
                )
                (list_box
                    (button :class "button${service_nm ? "-active" : ""}" :timeout "16s" :onclick "bin/sys/service.sh network" "󰌘    Network Manager")
                    (wrapped_text :text "Manage network devices, WIFI, ethernet and VPNs from the system tray. Also sends notifications on events")
                )
                ;; (list_box
                ;;     (button :class "button${obs_tray ? "-active" : ""}" :timeout "16s" :onclick "bin/tray.sh obs" "󰑋    OBS")
                ;;     (wrapped_text :text "Let OBS run in the system tray so it's always available when you need to quickly record something")
                ;; )
                (list_box
                    (button :class "button${service_idle ? "-active" : ""}" :onclick "bin/sys/service.sh idle" "󰒲    Swayidle")
                    (wrapped_text :text "Swayidle invokes actions after periods of inactivity")
                )
                (list_box
                    (button :class "button${service_clocks ? "-active" : ""}" :onclick "bin/sys/service.sh clock" "󰥔    GNOME Clocks")
                    (wrapped_text :text "Let Gnome Clocks run in the background so alarms can be triggered")
                )
            )
        )
        (separator)
        (scroll :class "scroll-thin"
            (box :orientation "v" :space-evenly false 
                (label :class "title" :text "EWW Shell")
                (list_box
                    (button :class "button${dock ? "-active" : ""}" :onclick "bin/sys/eww_shell.sh dock" "󱂩    Dock")
                    (wrapped_text :text "A dock to launch apps. Hover over the bottom screen edge to activate.")
                )
                (list_box
                    (button :class "button${bar ? "-active" : ""}" :onclick "bin/sys/eww_shell.sh bar""󱔓    Bar")
                    (wrapped_text :wrap true :text "A bar at the top of the screen showing workspaces, windows, media and other information")
                )
                (list_box
                    (button :class "button${rightclick ? "-active" : ""}" :onclick "bin/sys/eww_shell.sh desktop""󰍜    Desktop Menu")
                    (wrapped_text :wrap true :text "A desktop context menu activated by right clicking on the desktop")
                )
                ;; (list_box
                ;;     (button :class "button${titlebars ? "-active" : ""}" :onclick "bin/sys/eww_shell.sh titlebar""󱔓    Window Decorations")
                ;;     (wrapped_text :text "Add a titlebar to windows to make controlling the environment via a mouse easier")
                ;; )
                (list_box
                    (button :class "button${popups ? "-active" : ""}" :onclick "bin/sys/eww_shell.sh popups""󰍦    Popups")
                    (wrapped_text :text "On screen popups for volume and brightness changes")
                )
            )
        )
        )
        (box :orientation "h" :hexpand true :halign "center" 
            (box :space-evenly false :halign "center" :orientation "v"  :vexpand true
            (scroll :class "scroll-sys" :vexpand true
                (box :space-evenly false :orientation "v"
                    (box :class "category_box" :orientation "v" :space-evenly false
                        (box :class "padding_box"
                            ;; (icon_large :name "scalable/apps/${system.distro.icon}" :class "np")
                            (themed_icon :name {system.distro.icon} :width 128 :height 128)
                        )
                        (centerbox
                            :style "margin-bottom: 1rem;"
                            (link_button :url {system.distro.homeUrl}    :text "Homepage")
                            (link_button :url {system.distro.docUrl}     :text "Documentation")
                            (link_button :url {system.distro.supportUrl} :text "Support")

                        )
                        (split_text :left "Version" :right "${system.distro.build}")
                        (split_text :left "Operating System" :right {system.os.name})
                        (split_text :left "Kernel" :right {system.os.kernel})
                        (split_text :left "Kernel Version" :right {system.os.version})
                    )
                    (box :class "category_box" :orientation "v" :space-evenly false
                        (box :class "padding_box"
                            (themed_icon :name {system.platform.chasis} :width 128 :height 128)
                        )
                        (split_text :left "Vendor" :right {system.platform.vendor})
                        (split_text :left "Memory" :right {system.platform.mem})
                    )
                    (box :class "category_box" :orientation "v" :space-evenly false
                        (box :class "padding_box"
                            (themed_icon :name "cpu" :width 128 :height 128)
                        )
                        (split_text :left "Vendor" :right {system.platform.cpu.vendor})
                        (split_text :left "Architecture" :right {system.platform.cpu.arch})
                        (split_text :left "Model" :right {system.platform.cpu.model})
                        (split_text :left "Byte Order" :right "${system.platform.cpu.order}-Endian")
                        (split_text :left "Sockets" :right {system.platform.cpu.sockets})
                        (split_text :left "Cores / Threads" :right "${system.platform.cpu.sockets * system.platform.cpu.coresPerSocket} / ${
                        system.platform.cpu.coresPerSocket * system.platform.cpu.threadsPerCore * system.platform.cpu.sockets}")
                    )
                    (box :class "category_box" :orientation "v" :space-evenly false
                        (box :class "padding_box"
                            (themed_icon :name "audio-card" :width 128 :height 128)
                        )
                        (split_text :left "GPU Model" :right {system.platform.gpu.name})
                        (split_text :left "Connection" :right {system.platform.gpu.link})
                        (split_text :left "Driver" :right {system.platform.gpu.driver})
                        (split_text :left "Video Memory" :right "${system.platform.gpu.mem.used_nice} / ${system.platform.gpu.mem.total_nice}")
                        (split_text :left "Active Ports" :right {replace(jq(system.platform.gpu.ports, 'join(", ")'), '"', "")})
                    )
                    (box :class "category_box" :orientation "v" :space-evenly false
                        (box :class "padding_box"
                            (themed_icon :name {system.windowing.system} :width 128 :height 128)
                        )
                        (box :space-evenly false :hexpand true
                            (box :halign "start" :hexpand true 
                                (label :class "text" :text "Windowing System")
                            )
                            (link_button :url {system.windowing.system == "wayland" ? "https://wayland.freedesktop.org/" : "x.org"} :text {system.windowing.system})
                        )
                        (split_text :left {system.windowing.system == "wayland" ? "Compositor" : "Window Manager"} :right {system.windowing.wm})
                    )
                    (box :class "category_box" :orientation "v" :space-evenly false
                        (box :class "padding_box"
                            (themed_icon :name "cs-user" :width 128 :height 128)
                        )
                        (split_text :left "Hostname" :right {system.user.hostname})
                        (split_text :left "User" :right {system.user.user})
                        (split_text :left "Uptime" :right {formattime(EWW_TIME - system.user.boottime, "%T", "UTC")})
                        (split_text :left "Boottime" :right {formattime(system.user.boottime, "%H:%M")})
                    )
                )
            )
            )
        )   
    )
)
