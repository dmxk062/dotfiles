(defvar sources "[]")
(defvar sinks "[]")
(defpoll streams :interval "4s" :run-while {selected_section == 4 && audio_section == 2} "bin/mixer.sh")
(defvar active_sinks '{}')
(defvar active_sources '{}')

(defvar audio_state '{}')

(defvar audio_section 0)

(defvar audio_current_ports '')

(defwidget device_card [device type]
(box :space-evenly false :class "card" :orientation "v"
    (box :class "padding_box" :space-evenly false
        (themed_icon :name {type == 'sink' ? sink_images[device.icon?:"audio-card"] : source_images[device.icon?:"microphone"]} :width 64 :height 64)
        (box :orientation "v" :space-evenly false
            (label :class "card-label" :text "${device.name}" :limit-width 20)
            (box :class "sliderbox"
                (scale :class "audio-slider" :value "${device.volume}" :timeout "16s" :onchange "pactl set-${type}-volume ${device.id} {}%&&bin/audio_state.sh")
            )
        )
    )
    (box :class "card_footer" :space-evenly false :orientation "v"
        (box :space-evenly false
            (box :space-evenly false :hexpand true
                (button :timeout "16s" :onclick "pactl set-default-${type} ${device.id} &&bin/sinks_sources.sh upd ${type}s&&bin/audio_state.sh" :class "button${device.active ? "-active" : ""}" "Set as Default")
                (button :timeout "16s" :onclick "pactl set-${type}-mute ${device.id} ${device.mute ? "0" : "1"}&&bin/sinks_sources.sh upd ${type}s&&bin/audio_state.sh"
                :class "button${device.mute ? "" : "-active"}"
                "${type == "source" ? (device.mute ? "" : "")
                : (device.mute ? sink_icons[device.icon].muted : sink_icons[device.icon].unmuted)}    ${device.mute ? "Muted" : "Unmuted"}")
            )
            (button :class "button${audio_current_ports == device.id ? "-active" : ""}" 
            :timeout "128s"
            :visible {arraylength(device.ports) > 1}
            :onclick "${EWW_CMD} update audio_current_ports=${audio_current_ports == device.id ? "" : device.id}"
            "${arraylength(device.ports)} Ports"
            )
        )
        (revealer :reveal {audio_current_ports == device.id} :transition "slideup" :duration "200ms"
        (box :class "padding_box" :orientation "v" :space-evenly false 
                (for port in "${device.ports}"
                    (box :space-evenly false :halign "end" :hexpand true
                        (button :timeout "16s" :onclick "pactl set-${type}-port ${device.id} ${port.name}&&bin/sinks_sources.sh upd ${type}s" :class "button${port.name == device.port ?"-active" : ""}"
                            (label :text "${port_icons[port.name]}     ${port.desc}" :limit-width 24))
                    )
                )

        ))
    )
)
)

(defwidget audio_section []

    (box :visible "${selected_section == 4}" :class "section_box" :hexpand true :orientation "h" :space-evenly false    
        (box :orientation "h" :space-evenly false :class "sidebar"
            (box :space-evenly false :class "padding_box" :orientation "v"
                (box  :orientation "v" :space-evenly false :spacing 16
                    (box :orientation "v" :space-evenly false :halign "center" :class "card"
                        (box :orientation "v" :space-evenly false :class "padding_box"
                            (themed_icon :name {sink_images[active_sinks.icon?: "audio-card"]} :width 64 :height 64)
                            (label :class "title" :text "Out: ${active_sinks.name}" :limit-width 20 :class "title")
                            (scale :value "${audio_state.sink.vol}" :class "slider" :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%" :timeout "16s")
                        )
                        (box :space-evenly false :class "card_footer"
                            (button :class "button${audio_state.sink.mute ? "" : "-active"}" :onclick "pamixer -t&&bin/audio_state.sh" :timeout "16s"
                            "${audio_state.sink.mute ? "${sink_icons[active_sinks.icon?: "default"].muted}" : "${sink_icons[active_sinks.icon?: "default"].unmuted}"}    Mute")
                            (button :class "button" :onclick "pactl set-sink-volume @DEFAULT_SINK@ 50%&&bin/audio_state.sh" :timeout "24s" "50%")
                            (button :class "button" :onclick "pactl set-sink-volume @DEFAULT_SINK@ 100%&&bin/audio_state.sh" :timeout "24s" "100%")
                        )
                        )
                
                    (box :orientation "v" :space-evenly false :halign "center" :class "card"
                        (box :orientation "v" :space-evenly false :class "padding_box"
                            (themed_icon :name {source_images[active_sources.icon?: "microphone"]} :width 64 :height 64)
                            (label :class "title" :text "In: ${active_sources.name}" :limit-width 20 :class "title")
                            (scale :value "${audio_state.source.vol}" :class "slider" :onchange "pactl set-source-volume @DEFAULT_SOURCE@ {}%" :timeout "16s")
                        )
                        (box :space-evenly false :class "card_footer"
                            (button :class "button${audio_state.source.mute ? "" : "-active"}" :onclick "pamixer -t --default-source&&bin/audio_state.sh" :timeout "16s" 
                            "${audio_state.source.mute ? "${source_icons[active_sources.icon?: "microphone"].muted}" : "${source_icons[active_sources.icon?: "microphone"].unmuted}"}    Mute")
                            (button :class "button" :onclick "pactl set-source-volume @DEFAULT_SOURCE@ 50%&&bin/audio_state.sh" :timeout "24s" "50%")
                            (button :class "button" :onclick "pactl set-source-volume @DEFAULT_SOURCE@ 100%&&bin/audio_state.sh" :timeout "24s" "100%")
                        )
                    )
                )
            )
            (separator)
            (box :class "padding_box" :space-evenly false :orientation "v" :vexpand true :valign "center"
                (button :class "button" :onclick "${audio_section == 0 ? "bin/sinks_sources.sh upd sinks" : (audio_section == 1 ? "bin/sinks_sources.sh upd sources" : "bin/mixer.sh")}&&bin/audio_state.sh""󰑓    Reload")
                (button :timeout "16s" :onclick "${EWW_CMD} update audio_section=0&&bin/sinks_sources.sh upd sinks" :class "button${audio_section == 0 ? "-active" : ""}" "󰓃    Output")
                (button :timeout "16s" :onclick "${EWW_CMD} update audio_section=1&&bin/sinks_sources.sh upd sources" :class "button${audio_section == 1 ? "-active" : ""}" "    Input")
                (button :timeout "16s" :onclick "${EWW_CMD} update audio_section=2&&bin/mixer.sh" :class "button${audio_section == 2 ? "-active" : ""}" "󰺂    Mixer")
                (button :timeout "16s" :onclick "bin/suspend.sh 'pavucontrol'&" :class "button" "󰭴    Control")
            )
        )
        (box :visible "${audio_section == 0}" :space-evenly false
            (scroll :vscroll true :class "scroll-huge-wider" :hexpand true
                (box :orientation "v" :space-evenly false
                    (for sink in sinks
                        (device_card :device "${sink}" :type "sink")
                    )
                )
            )
        )
        (box :visible "${audio_section == 1}" :space-evenly false
            (scroll :vscroll true :class "scroll-huge-wider" :hexpand true
                (box :orientation "v" :space-evenly false 
                    (for source in sources
                        (device_card :device "${source}" :type "source")
                    )
                )
            )
        )
    
        (box :visible "${audio_section == 2}" :space-evenly false :halign "center"
            (scroll :vscroll true :class "scroll-huge-wider" :hexpand true
                (box :orientation "v" :space-evenly false
                    (for stream in streams
                        (box :class "card" :space-evenly false :orientation "v"
                            (box :class "padding_box" :space-evenly false
                                ;; (image :icon {stream.icon} :icon-size "dialog" :image-width 64)
                                (icon :name {stream.iconAbs ? 
                                    "../${stream.icon}.svg" :
                                    "scalable/apps/${stream.icon}.svg"})
                                (box :orientation "v" :space-evenly false
                                    (label :class "card-label" :text "${stream.name}" :limit-width 24 :tooltip "${stream.name} in ${stream.app}")
                                    (label :class "text" :text {stream.app} :limit-width 48 )
                                    (box :class "sliderbox" :space-evenly false :hexpand true
                                        (scale :class "audio-slider${stream.volume > 100 ? "-overamplified" : ""}" :value {stream.volume} :min 1 :max 100 :onchange "bin/audio/streamval.sh ${stream.id} {}&" :hexpand true)
                                    )
                                )
                            )
                            (box :space-evenly false :class "card_footer"
                                (box :hexpand true :space-evenly false
                                    (button :timeout "16s" :class "button${stream.mute ? "" : "-active"}":onclick "pactl set-sink-input-mute ${stream.id} toggle&&bin/mixer.sh" "${stream.mute ? "󰝟    Muted" : "󰖀    Unmuted"}")
                                    (button :timeout "16s" :class "button" :onclick "pactl set-sink-input-volume ${stream.id} 50%; bin/mixer.sh" "50%")
                                    (button :timeout "16s" :class "button" :onclick "pactl set-sink-input-volume ${stream.id} 100%; bin/mixer.sh" "100%")
                                )
                                (button :timeout "16s" :class "button${stream.volume > 100 ? "-warn" : ""}" 
                                :onclick "pactl set-sink-input-volume ${stream.id} ${stream.volume > 100 ? 100 : 130}%; bin/mixer.sh" 
                                "󰕾    Overamplify")
                            )
                        )
                    )
                )
            )
        )
    )
)

