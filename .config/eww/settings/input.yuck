;; options
(defvar input_layout "QWERTY US")
(defvar input_left_handed false)
(defvar input_tap_to_click true)
(defvar input_ws_swipe true)
(defvar input_natural_scroll false)
(defvar input_osk false)
(defvar input_osk_overlay true)

;; my default settings from hyprland
(defvar input_repeat_rate 25)
(defvar input_repeat_delay 600)

(defvar input_scroll_speed 100)
(defvar input_mouse_sensitivity 50)

(defvar input_test_area_event '')

(defvar autorotate true)

(defwidget input_section []
    (box :visible "${selected_section == 1}" :class "section_box" :hexpand true :orientation "h" :space-evenly false
        (box :space-evenly false :class "sidebar"
            (scroll :class "scroll-medium"
                (box :orientation "v" :space-evenly false
                    (label :class "title" :text "Keyboard") 
                    (list_box 
                        (button  :class "button${input_layout == "QWERTZ DE" ? "-active" : ""}":timeout "16s" :onclick "bin/input.sh kbd" "󰌌   ${input_layout}") 
                        (wrapped_text :text "Switch between the german and english keyboard Layout")
                    )
                    (list_box
                        (button :class "button${input_osk ? "-active" : ""}" :onclick "../shell/kbd/open.sh" "${input_osk ? "󰌌" : "󰌐"}    On Screen Keyboard")
                        (wrapped_text :text "Enable on screen keyboard")
                    )
                    (list_box
                        (button :class "button${input_osk_overlay ? "-active" : ""}" :onclick "../shell/kbd/change_layer.sh toggle" "${input_osk_overlay ? "󰌌" : "󱂩"}     OSK Layer: ${input_osk_overlay ? "Floating" : "Bottom"}")
                        (wrapped_text :text "Whether the on screen keyboard should float or be tiled at the bottom of the screen")
                    )
                    (list_box
                        (button :class "button${autorotate ? "-active" : ""}" :onclick "bin/rotation.sh toggle" "${autorotate ? "󰑵" : "󰑵"}    Auto Rotate Screen")
                        (wrapped_text :text "Automatically rotates the screen based on the position of the device (requires hardware sensors)")
                    )
                    (list_box
                        (button :class "button" :onclick "bin/kbd/rate.sh reset" "󰧹    Reset Repeat Rate")
                            (margin
                                (scale :value "${input_repeat_rate}" :min 0 :max 100 :class "slider-small" :onchange "bin/kbd/rate.sh {}")
                            )
                        (wrapped_text :text "Control how often a held down key is pressed")
                    )
                    (list_box
                        (button :class "button" :onclick "bin/kbd/delay.sh reset" "󰌏    Reset Repeat Delay")
                            (margin
                                (scale :value "${input_repeat_delay}" :min 100 :max 1000 :class "slider-small" :onchange "bin/kbd/delay.sh {}")
                            )
                        (wrapped_text :text "Control how long it takes for a held down key to start to repeat")
                    )
               )
            )
            (separator)
            (scroll :class "scroll-medium"
                (box :orientation "v" :space-evenly false
                    (label :class "title" :text "Mouse & Touchpad") 
                    (list_box 
                        (button :class "button${input_left_handed ? "-active" : ""}" :onclick "bin/input.sh left_handed" :onrightclick "bin/input.sh left_handed" "${input_left_handed ? "󰹆" : "󱠰"}    Left Handed")
                        (wrapped_text :text "Enable / Disable left handed mode. Inverts mouse buttons when enabled")
                    )
                    (list_box
                        (button :class "button${input_tap_to_click ? "-active" : ""}" :onclick "bin/input.sh tap_click" "󱊩    Tap to Click")
                        (wrapped_text :text "Tap on the touchpad to click. Two fingers and three fingers right and middle click respectively")
                    )
                    (list_box
                        (button :class "button${input_natural_scroll ? "-active" : ""}" :onclick "bin/input.sh natural_scroll" "󰫀    Natural Scroll")
                        (wrapped_text :text "Natural scrolling is recommended for touchpads. When enabled, scrolling moves the content, not the view")
                    )
                    (list_box
                        (button :class "button${input_ws_swipe ? "-active" : ""}" :onclick "bin/input.sh ws_swipe" "󰵶    Swipe")
                        (wrapped_text :text "Enable switching workspaces by three finger swiping left and right")
                    )
                    (list_box
                        (button :class "button" :onclick "bin/mouse/sensiv.sh reset" "󰍽    Reset Mouse Sensitivity")
                        (margin 
                            (scale :value "${input_mouse_sensitivity}" :min 0 :max 100 :class "slider" :onchange "bin/mouse/sensiv.sh {}")
                        )
                        (wrapped_text :text "Change the mouse cursor speed")
                    )
                    (list_box
                        (button :class "button" :onclick "bin/mouse/scroll.sh reset" "󰫀    Reset Touchpad Scroll Speed" )
                        (margin 
                            (scale :value "${input_scroll_speed}" :min 5 :max 300 :class "slider" :onchange "bin/mouse/scroll.sh {}")
                        )
                        (wrapped_text :text "Set the scroll speed for touchpads")
                    )
                )
            )
        )
        (box :space-evenly false :hexpand true :class "padding_box" :orientation "v"
            (label :class "title" :text "Test Area")
            (eventbox :onclick "${EWW_CMD} update input_test_area_event='primary'"
                        :onrightclick "${EWW_CMD} update input_test_area_event='secondary'"
                        :onmiddleclick "${EWW_CMD} update input_test_area_event='middle'"
                        :onscroll "[ {} = up ]&&${EWW_CMD} update input_test_area_event='up'||${EWW_CMD} update input_test_area_event='down'"
                (box :class "test_area${input_test_area_event != "" ? "-${input_test_area_event}" : ""}"
                    (label :class "heading" :text "${input_test_area_event}")

                )
            )
            (list_box 
                (label :class "title" :text "Typing test")
                (input :class "input")
            )
        )
    )
)
