(include "dock/overrides.yuck")


(defvar dock_active_win '{}')
(deflisten dock_windows "dock/bin/windows.sh listen")



(defvar dock_hover_win '')

(defwindow dock_window_popup 
        :stacking "fg"
        :namespace "eww_popup"
        :geometry (geometry :x 0
                            :y 0
                            :width 0
                            :height 0
                    )
        :stacking "overlay"
    (dock_window_options)
)

(defwidget dock_window_options []
    (box :space-evenly false :halign "center" :valign "center"
        (box :orientation "v" :class "popup_box_padded"
        (llbutton :onclick "${EWW_CMD} close dock_window_popup; hyprctl dispatch closewindow address:${dock_active_win.address}" :label "Close Window")
        (llbutton :onclick "${EWW_CMD} close dock_window_popup; dock/bin/force_kill.sh ${dock_active_win.pid}" :label "Kill Window")
        (llbutton :onclick "${EWW_CMD} close dock_window_popup; ${dock_active_win.class}||gtk-launch '${dock_active_win.class}'" :label "Launch new Window")
        (llbutton :onclick "${EWW_CMD} close dock_window_popup; sleep 0.2; desktop/mods/resize.sh ${dock_active_win.address}&" :label "Resize Window")
        (llbutton :onclick "${EWW_CMD} close dock_window_popup; hyprctl dispatch togglefloating address:${dock_active_win.address}" :label "Toggle Float")
        (llbutton :onclick "${EWW_CMD} close dock_window_popup; dock/bin/move.sh '${dock_active_win.address}' current" :label "Move to current")
        (llbutton :onclick "${EWW_CMD} close dock_window_popup; ${dock_active_win.workspace.name == "special:4" ?
        "dock/bin/move.sh '${dock_active_win.address}' current" :
        "hyprctl dispatch movetoworkspacesilent special:4,address:${dock_active_win.address}"}"
        :label {dock_active_win.workspace.name == "special:4" ? "Restore" : "Hide"})
        (lbutton :onclick "${EWW_CMD} close dock_window_popup" :label "Cancel")
        )
    )
)



(defwidget app_button [app]
    (eventbox :onhover "${EWW_CMD} update dock_hover_win='${app.address}'" :onhoverlost "${EWW_CMD} update dock_hover_win=''"
    (button 
    :class "app_button${app.address == window.address ? "-active" : ""
    }" 
    :timeout "16s"
    ;; :onclick {matches(app.workspace.name, "special:*.") ? 
    ;; "hyprctl dispatch togglespecialworkspace ${replace(app.workspace.name, "special:", "")}" :
    ;; "hyprctl dispatch focuswindow address:${app.address}"}
    :onclick "dock/bin/focus.sh '${app.address}' '${app.workspace.name}'"
    :onrightclick "${EWW_CMD} update dock_active_win='${replace(app, "'", "")}'; sleep 0.1; dock/bin/open_win_menu.sh"
    :onmiddleclick "hyprctl dispatch closewindow address:${app.address}"
    :visible {app.mapped && app.size != '[0, 0]' && (app.class != "" || matches(app.title, "^Minecraft.*")) && app.title != ""}
    :tooltip "${app.title} in ${app.workspace.name}"
        (overlay 
        (themed_icon :name {app.class == "kitty" ? (matches(app.title, "^nv:*.") ?  "nvim" : 
        (matches(app.title, "^lf:*.") ? "file-manager" :
        (app.title == "qalc" ? "calculator" :
        (app.title == "cava" ? "accessories-media-converter" : "kitty")))) :
        (matches(app.title, "^Minecraft*.") ? "org.prismlauncher.PrismLauncher" :
        (app.class == "gamescope" ? 
            (steam_game_icons[app.title]?: "steam") : ;; for steam games in gamescope
        (matches(app.class, "Minecraft*.") ? "org.prismlauncher.PrismLauncher" : ;; and the usual minecraft issue
        (app.title == "About" ? "dialog-info" : ;; info icon for about dialogs
        window_overrides[app.class]?:app.class))))} ;; all the rest
        :width 48 :height 48)
            (box  :space-evenly false :halign "end" :valign "start" :visible {app.pinned || (dock_hover_win == app.address && app.floating)} 
                (button 
                :timeout "128s"
                :onclick "hyprctl dispatch pin address:${app.address}"

                (themed_icon :name {app.pinned ? "window-pin-symbolic" : "view-pin-symbolic"} :width 8 :height 8)
                )
            )
            ;; (box :space-evenly false :halign "start" :valign "start" 
            ;;     (label :class "dockicon-label" :text {ws_icons[app.workspace.name]})
            ;;     ;; (themed_icon :name "window-close-symbolic" :width 8 :height 8)
            ;; )
            (box  :space-evenly false :halign "end" :valign "end" :visible {app.xwayland}
                (themed_icon :name "xorg" :width 8 :height 8)
            )
            (box  :space-evenly false :halign "start" :valign "end" :visible {matches(app.workspace.name, "special:*.")}
                 (themed_icon :name "org.gnome.Lollypop-tag-symbolic" :width 8 :height 8)
            )
        )
    )

    )
)

(defwidget tasklist []
    (box :space-evenly false
        (box :space-evenly false
        (for win in dock_windows 
            (app_button :app {win})
        ))

        (box :space-evenly false :visible {dock_windows != "[]"}
        (separator))
    )
)
