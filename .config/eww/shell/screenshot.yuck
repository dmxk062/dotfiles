(defwindow screenshot_popup 
        :geometry (geometry :x 0
                            :y 0
                            :width 0
                            :height 0
                            :anchor "center"
                    )
        :stacking "overlay"
        :namespace "eww_noblur"
    (screenshot)
)

(defvar screenshot_section 0)
(defvar screenshot_screens '[]')
(defvar screenshot_dest "disk")
(defvar screenshot_selected_display "")

(defvar qr_data '[]')
(defvar qr_error false)
(defvar qr_error_msg '')

(defvar qr_active_row '')

(defvar qr_icons '{"bar":"󰁱","qr":"󰐲","misc":"󱔢"}')

(defvar colorpicker_freeze false)
(defvar colorpicker_zoom true)
(defvar colorpicker_colors '[]')


(defwidget screenshot_screen [] 
    (box :orientation "v" :space-evenly false :visible "${screenshot_section == 0}" :hexpand true :vexpand true
        ;; (label :class "heading-np" :text "Select a Screen")
        (box   :space-evenly false  :halign "center" :valign "center" :hexpand true :vexpand true :orientation "h" :class "padding_box"
            (for screen in screenshot_screens
                (box :space-evenly false :halign "start" :valign "end"
                    (button :class "screenshot-display${screenshot_selected_display == screen.name ? "-active" : ""}" :onclick "${EWW_CMD} update screenshot_selected_display=${screen.name}" :timeout "128s"
                        (box :width "${screen.transform % 2 == 1 ? "${round(screen.height / 15,0)}": "${round(screen.width / 15,0)}"}" :height "${screen.transform % 2 == 1 ? "${round(screen.width / 15,0)}": "${round(screen.height / 15,0)}"}"
                            (label :text "${screen.name}")
                        )
                    )
                )
            )
        )
        (box :space-evenly false :halign "center" :visible "${screenshot_selected_display != ""}"
            (button :class "button" :timeout "256s" :onclick "bin/screenshot_menu.sh screen disk ${screenshot_selected_display}&" "󰈟    Save to Disk")
            (button :class "button" :timeout "256s" :onclick "bin/screenshot_menu.sh screen clip ${screenshot_selected_display}&" "󰅇    Copy to Clipboard")
        )
    )
)
(defwidget screenshot_selection [] 
    (box :orientation "v" :space-evenly false :visible "${screenshot_section == 1}":hexpand true :vexpand true
        ;; (label :class "heading-np" :text "Select a Region")
        (box :vexpand true :class "padding_box"
        (icon_large :name "scalable/apps/accessories-screenshot.svg")
        )
        (box :space-evenly false :halign "center"
            (button :class "button" :timeout "256s" :onclick "bin/screenshot_menu.sh region disk ${screenshot_selected_display}&" "󰈟    Save to Disk")
            (button :class "button" :timeout "256s" :onclick "bin/screenshot_menu.sh region clip ${screenshot_selected_display}&" "󰅇    Copy to Clipboard")
        )
    )
)

(defwidget screenshot_qr_row [qr_elem]
    (box :class "row" :space-evenly false :orientation "v"
        (box :class "padding_box" :space-evenly false
            ;; (label :class "text-huge" :text {qr_icons[qr_elem.type]})
            (eventbox :onclick "xdg-open ${qr_elem.path}"
                (image :path {qr_elem.path} :image-width 48 :image-height 48)
            )
            (box :halign "end" :hexpand true :space-evenly false
                (box :visible {qr_elem.data.type == "web"} :orientation "v"
                    (link_button :url {qr_elem.data.str} :text {qr_elem.data.str} :length 40)
                    (clipboard_text :content {qr_elem.data.str} :label {qr_elem.data.str} :length 40)
                ) 
                (box :visible {qr_elem.data.type == "email"} :orientation "v"
                    (link_button :url "mailto:${qr_elem.data.str}" :text "Mail to ${qr_elem.data.str}" :icon "󰺻")
                    (clipboard_text :content {qr_elem.data.str} :label {qr_elem.data.str})
                ) 
                (box :visible {qr_elem.data.type == "text"} :orientation "v"
                    (clipboard_text :content {qr_elem.data.str} :label {qr_elem.data.str} :length 40)
                ) 
                (box :visible {qr_elem.data.type == "file"} :orientation "v"
                    (clipboard_text :content {qr_elem.data.str} :label {qr_elem.data.str} :length 40)
                    (button :class "button" :timeout "128s" :onclick "xdg-open '${qr_elem.data.str}'" "Open")
                ) 
                (box :visible {qr_elem.data.type == "wifi"} :space-evenly false :spacing 16
                    (wrapped_text :text "SSID: ${qr_elem.data.ssid}
Security: ${qr_elem.data.security}
Hidden: ${qr_elem.data.hidden ? "Yes" : "No"}
Password: ${qr_elem.data.passwdRequired ? "Yes" : "No"}") 
                    (box :orientation "v"
                        (button :class "button" :timeout "128s" 
                        :onclick "eww_settings.sh wifi; eww -c ~/.config/eww/settings update wifi_passwd='${qr_elem.data.passwd}' wifi_connect_ssid='${qr_elem.data.ssid}' wifi_password_reveal=true" 
                        "󰤨    Connect")
                        (clipboard_button :label "Copy Password" :content {qr_elem.data.passwd})
                    )
                ) 
            )
            (box :visible {qr_elem.data.type == "contact"} :space-evenly false :spacing 16
                (label :class "title" :text "${qr_elem.data.name}")
                (box :orientation "v"
                    (save_from_file :file {qr_elem.data.path} :title "Save Contact as" :text "Save" :name "${qr_elem.data.name}.vcs" :precmd "${EWW_CMD} close screenshot_popup" :postcmd "./bin/screenshot_menu.sh toggle")
                    (clipboard_file_button :label "Copy Contact" :content {qr_elem.data.path})
                )
            ) 
        )



    )
)

(defwidget screenshot_qr [] 
    (box :orientation "v" :space-evenly false :visible "${screenshot_section == 2}":hexpand true :vexpand true
        ;; (label :class "heading-np" :text "Select a QR or Bar Code")
        (box :vexpand true :class "padding_box"
            (scroll :class "scroll-tiny"
                (box :orientation "v" :space-evenly false
                    (for qr_item in qr_data
                        (screenshot_qr_row :qr_elem "${qr_item}")
                    )
                )
            )
        )
        (box :hexpand true :space-evenly false :halign "center"
            (button :class "button" :timeout "16s" :onclick "bin/qr_decode.sh&" "󰐳    Scan")
            (button :class "button-error" :timeout "16s" :onclick "${EWW_CMD} update qr_data='[]' qr_error=false qr_error_msg=''" "󰩹    Clear")
            (error :if qr_error :text "${qr_error_msg}")
        )
    )
)

(defwidget screenshot_color [] 
    (box :orientation "v" :space-evenly false :visible "${screenshot_section == 3}":hexpand true :vexpand true
        ;; (label :class "heading-np" :text "Pick a Color")
        (box :vexpand true :class "padding_box" :orientation "v" :space-evenly false
            (box :vexpand true 
                (scroll :class "scroll-tiny"
                    (box :orientation "v" :space-evenly false
                        (for color in colorpicker_colors 
                            (box :class "row" :orientation "v"
                                (box :class "padding_box" :space-evenly false
                                    (box :class "circle" :style "background-color: ${color.hex};" :width 48 :height 48)
                                    (box :halign "end" :hexpand true :space-evenly false
                                        (clipboard_button :label "Rgb: ${color.r} ${color.g} ${color.b}" 
                                            :content "rgb(${color.r}, ${color.g}, ${color.b})")
                                        (clipboard_button :label "Hex: ${color.hex}" :content {color.hex})
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
        (box :space-evenly false
            (box :space-evenly false :valign "center" :hexpand true
                (tick :var colorpicker_freeze :varstr "colorpicker_freeze" :label "Freeze")
                (tick :var colorpicker_zoom   :varstr "colorpicker_zoom" :label "Zoom")
            )
        (button :class "button" :timeout "128s" :onclick "ZOOM=${colorpicker_zoom} FREEZE=${colorpicker_freeze} bin/colorpicker.sh" "󰴱    Select color")
            (button :class "button-error" :timeout "16s" :onclick "${EWW_CMD} update colorpicker_colors='[]'" "󰩹    Clear")
        )
    )
)

(defwidget screenshot []
    (box :space-evenly false :halign "center" :valign "center"
        (box :space-evenly false :orientation "v" :class "popup_box-sc"
            (box :halign "end"
                (close_button :window "screenshot_popup")
            )
            (box :class "" :space-evenly false  :hexpand true :vexpand true
               (screenshot_screen) 
               (screenshot_selection) 
               (screenshot_qr) 
               (screenshot_color)
            )
            (box :class "popup_footer"
                (button :class "button${screenshot_section == 0 ? "-active" : ""}" :onclick "${EWW_CMD} update screenshot_section=0&&bin/screenshot_menu.sh list_monitors" "󰍹    Screen")
                (button :class "button${screenshot_section == 1 ? "-active" : ""}" :onclick "${EWW_CMD} update screenshot_section=1" "󰆞    Selection")
                (button :class "button${screenshot_section == 2 ? "-active" : ""}" :onclick "${EWW_CMD} update screenshot_section=2" "󰐳    QR")
                (button :class "button${screenshot_section == 3 ? "-active" : ""}" :onclick "${EWW_CMD} update screenshot_section=3" "    Color")
            )
        )
    )

)
